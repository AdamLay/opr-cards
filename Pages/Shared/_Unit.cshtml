@using OnePageRulesCards.Data
@using OnePageRulesCards.Services

@model Selection

@inject CharacteristicService CharacteristicService
@inject ProfileService ProfileService
@inject RulesService RulesService

@{
  IEnumerable<IGrouping<string, Profile>> allProfiles = ProfileService.GetProfiles(Model)
    ?.GroupBy(p => p.TypeName);

  IEnumerable<IGrouping<string, Profile>> spellProfiles = allProfiles
    ?.Where(p => p.Key.Contains("Spell"));

  IEnumerable<IGrouping<string, Profile>> otherProfiles = allProfiles
?.Where(p => p.Key != "Unit" && p.Key != "Model" && !p.Key.Contains("Spell"));

  Profile? unitProfile = allProfiles
    ?.FirstOrDefault(grp => grp.Key == "Unit" || grp.Key == "Model")
    ?.FirstOrDefault();

  if (unitProfile == null)
  {
    return;
  }

  string specialRules = ProfileService.GetSpecialRules(unitProfile);
  //int? toughness = ProfileService.GetToughness(unitProfile);
  //int? psychic = ProfileService.GetPsychic(unitProfile);
}

<div class="card mb-4">
  <div class="card-body">
    <h3 class="text-center" style="font-weight: 500;">@Model.Name</h3>
    <hr class="mb-0" />
    @*<div class="d-flex mb-2" style="justify-content: space-evenly;">

        <div class="profile-stat quality">
          <p>
            @unitProfile.Characteristics.First(c => c.Name.ToLower().StartsWith("qua")).Value
          </p>
          <p>QUA</p>
        </div>
        <div class="profile-stat defense">
          <p class="lead">
            @unitProfile.Characteristics.First(c => c.Name.ToLower().StartsWith("def")).Value
          </p>
          <p>DEF</p>
        </div>

        @if (toughness.HasValue)
        {
          <div class="profile-stat toughness">
            <p class="lead">@toughness</p>
            <p>T</p>
          </div>
        }
      </div>*@

    <div class="d-flex mb-2" style="justify-content: center;">

      <div class="profile-stat">
        <p>Quality</p>
        <p>
          @unitProfile.Characteristics.First(c => c.Name.ToLower().StartsWith("qua")).Value
        </p>
      </div>
      <div class="profile-stat">
        <p>Defense</p>
        <p>
          @unitProfile.Characteristics.First(c => c.Name.ToLower().StartsWith("def")).Value
        </p>
      </div>
      
      @foreach (string rule in new[] { "Tough", "Psychic", "Wizard" })
      {
        int? value = ProfileService.GetSpecialRuleValue(unitProfile, rule);

        @if (value.HasValue)
        {
          <div class="profile-stat">
            <p>@rule</p>
            <p>@value</p>
          </div>
        }
      }
    </div>

    @foreach (var p in otherProfiles)
    {
      <table class="table stats-table">
        <thead>
          <tr>
            <th>@ProfileService.MapName(p.Key)</th>
            @foreach (Characteristic c in p.First().Characteristics)
            {
              <th>@CharacteristicService.MapName(c.Name)</th>
            }
          </tr>
        </thead>
        <tbody>
          @foreach (Profile profile in p)
          {
            <tr>
              <td style="font-weight: 600; width: 200px;">@profile.Name</td>
              @foreach (Characteristic c in profile.Characteristics)
              {
                <td>@CharacteristicService.MapName(c.Value)</td>
              }
            </tr>
          }
        </tbody>
      </table>
    }

    @*<partial name="Shared/UnitProfile" model="unitProfiles" />
      <partial name="Shared/WeaponProfile" model="weaponProfiles" />*@
    @foreach (var rule in RulesService.FindRulesForUnit(Model))
    {
      <p>
        <span style="font-weight: bold;">@RulesService.ReplaceNameFromSpecialRules(rule.Name, specialRules)</span>
        - @RulesService.ParseRule(rule.Description)
      </p>
    }
  </div>
</div>